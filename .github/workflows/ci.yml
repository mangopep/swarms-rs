name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run CI daily at 6 AM UTC to catch dependency issues
    - cron: '0 6 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
            experimental: true
    continue-on-error: ${{ matrix.experimental || false }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    # Optimized: Run all autonomous tests in parallel for speed
    - name: Run autonomous testing suite (parallel)
      run: |
        # Run all autonomous tests concurrently for maximum speed
        cargo test --test test_suite_health --test test_coverage_analysis --test test_integration_scaffolding --test test_security_safety --verbose --jobs 4
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      continue-on-error: false  # Change to true if you want CI to continue even if autonomous tests fail
      
    # Fallback: If autonomous tests fail, run them individually for better error reporting
    - name: Debug autonomous tests individually (on failure)
      if: failure() && matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: |
        echo "üîç Running autonomous tests individually for debugging..."
        ./scripts/debug_autonomous_tests.sh || true

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'

    - name: Build workspace
      run: cargo build --workspace --all-features

    - name: Run tests
      run: cargo test --workspace --all-features --verbose

    - name: Run tests with no default features
      run: cargo test --workspace --no-default-features --verbose

    - name: Run doc tests
      run: cargo test --workspace --doc --all-features

    - name: Check examples compile
      run: |
        cargo check --examples --all-features
        # Test specific examples that should run
        for example in $(find examples -name "*.rs" -type f | head -5); do
          echo "Checking example: $example"
          cargo check --example $(basename "$example" .rs) || true
        done

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: |
        cd swarms-rs
        cargo bench --bench concurrent_workflow_benchmarks -- --output-format json | tee bench_results.json || true
        cargo bench --bench graph_workflow_benchmarks -- --output-format json | tee -a bench_results.json || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: swarms-rs/bench_results.json
        retention-days: 30

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  memory-safety:
    name: Memory Safety with Miri
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust nightly with Miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-miri-${{ hashFiles('**/Cargo.lock') }}

    - name: Setup Miri
      run: cargo miri setup

    - name: Run tests with Miri
      run: |
        # Run a subset of tests with Miri (it's slow)
        cd swarms-rs
        cargo miri test --lib --test example_test || true
      env:
        MIRIFLAGS: -Zmiri-strict-provenance

  minimal-versions:
    name: Minimal Versions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-minimal-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-hack
      uses: taiki-e/install-action@cargo-hack

    - name: Check with minimal versions
      run: |
        cargo hack check --workspace --all-features --version-range 1.70..
